This C++ project is the result of the final assignment for the course Programming in Engineering at the University of Twente, presented on the 26th of January, 2024. The project is developed by Miguel Garcia Arnaiz de las Revillas (M-IDE) and Nick Buhling (M-IDE).

The code implements a program that lets the user play the casino card game Blackjack. In this program, one player can play at a time against the dealer. 

In the game of Blackjack, players compete against the dealer with the objective of reaching a hand value as close to 21 as possible without exceeding it, called "busting". The card values are 2-9, 10, Jack, Queen and King are also 10 and Ace can be chosen to be 1 or 11. The gameplay begins with the player receiving two cards and having the option to choose whether to "hit" for additional cards or "stand" to maintain their current total. The dealer, on the other hand, follows a specific set of rules for drawing additional cards. When the player stands, the dealer draws cards until their hand value is equal to or exceeds 17. The ultimate goal for players is to outscore the dealer without going over the 21-point limit. Achieving a Blackjack, defined as getting 21 with an Ace and a 10-point card, results in an instant win for the player. This classic and thrilling card game combines strategy, risk assessment, and a bit of luck. It was chosen to develop this game as it allows the player to play individually against an opponent, without needing this opponent to make informed and strategic decisions. 

The code is organized into three classes: Card, Hand, and Blackjack. The Card class defines individual playing cards (consisting of a face value and a symbol), allowing for random or specified creation, and includes methods for setting properties, determining game values, and printing a graphical representation. The Hand class represents a collection of those Card objects and includes various methods such as adding and removing cards and printing graphical representations of the hand to the console. The Blackjack class serves as the core logic of the game, managing rounds, player and dealer hands, and evaluating round outcomes. It incorporates pauses between card draws to simulate real-world gameplay and offers a main menu for users to start new rounds or quit the game. The code uses object-oriented programming to enhance modularity and readability, with each class building upon the functionalities of the others. To illustrate, the Card and Hand classes can easily be reused to program a variety of different card games. The main script of the program launches a Blackjack game instance.